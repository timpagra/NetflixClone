[{"/Users/tim/Documents/Documents/NetflixClone/my-app/src/components/Header.js":"1","/Users/tim/Documents/Documents/NetflixClone/my-app/src/App.js":"2","/Users/tim/Documents/Documents/NetflixClone/my-app/src/index.js":"3","/Users/tim/Documents/Documents/NetflixClone/my-app/src/components/SidePane.js":"4","/Users/tim/Documents/Documents/NetflixClone/my-app/src/components/Card.js":"5"},{"size":3887,"mtime":1612236452721,"results":"6","hashOfConfig":"7"},{"size":1970,"mtime":1612377848908,"results":"8","hashOfConfig":"7"},{"size":432,"mtime":1612196428682,"results":"9","hashOfConfig":"7"},{"size":2559,"mtime":1611626146840,"results":"10","hashOfConfig":"11"},{"size":701,"mtime":1612377293800,"results":"12","hashOfConfig":"7"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1klmgn1",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1i7uxnh",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tim/Documents/Documents/NetflixClone/my-app/src/components/Header.js",[],"/Users/tim/Documents/Documents/NetflixClone/my-app/src/App.js",["24","25"],"import \"./App.css\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport SearchAppBar from \"./components/Header\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [genreList, setGenreList] = useState([]);\n  const [discover, setDiscover] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [genreMovies, setGenreMovies] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState(\"\");\n  const [page, setPage] = useState(\"\");\n\n  useEffect(async () => {\n    const discoverPromise =  axios.get(\"/getDiscoverList\");\n    const genrePromise =  axios.get(\"/getGenreList\");\n    const [discover, genre] = await Promise.all([discoverPromise, genrePromise]);\n    setGenreList(genre.data.genres);\n    setDiscover(discover.data);\n  }, []);\n\n  // conditionally fetch search results\n  useEffect(async () => {\n    const searchPromise = await axios.get(\"/getSearchTerm\", { params : { query: search}});\n    setSearchResult(searchPromise.data.results);\n  }, [search]);\n\n  // conditionally fetch results based on genre selected\n  useEffect(async () => {\n    const genrePromise = await axios.get(\"/getSelectedGenre\", { params : { with_genres: selectedGenre.toString()}});\n    setGenreMovies(genrePromise.data.results);\n  }, [selectedGenre]);\n\n  // Update the state val for the search term a user may have\n  const handleUpdateSearch = (value) => {\n    console.log(\"The event value \", value);\n    return setSearch(value);\n  };\n\n  // Update the state value for the selected genre\n  const handleGenreSelected = (value) => {\n    return setSelectedGenre(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchAppBar cardDetails={discover} \n        genre={genreList} \n        updateSearch={handleUpdateSearch} \n        searchResult={searchResult}\n        genreMovies={genreMovies}\n        updateSelectedGenre={handleGenreSelected}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/tim/Documents/Documents/NetflixClone/my-app/src/index.js",[],"/Users/tim/Documents/Documents/NetflixClone/my-app/src/components/SidePane.js",[],"/Users/tim/Documents/Documents/NetflixClone/my-app/src/components/Card.js",[],{"ruleId":"26","severity":1,"message":"27","line":14,"column":10,"nodeType":"28","messageId":"29","endLine":14,"endColumn":14},{"ruleId":"26","severity":1,"message":"30","line":14,"column":16,"nodeType":"28","messageId":"29","endLine":14,"endColumn":23},"no-unused-vars","'page' is assigned a value but never used.","Identifier","unusedVar","'setPage' is assigned a value but never used."]